AWSTemplateFormatVersion: 2010-09-09

Description: Setup the student account with the required IAM entities (group, user, CloudWatch role)

Parameters:
  MaxPasswordAge:
    Type: 'Number'
    Description: 'Maximum age for passwords'
    Default: 180
    ConstraintDescription: '(90-365 days)'
    MinValue: 90
    MaxValue: 365
  MinPasswordLength:
    Type: 'Number'
    Description: 'Minimum password length'
    Default: 8
    ConstraintDescription: '(8-128 characters)'
    MinValue: 8
    MaxValue: 128
  PasswordHistory:
    Type: 'Number'
    Description: 'Number of previous passwords to remember'
    Default: 3
    ConstraintDescription: '(1-24 passwords)'
    MinValue: 1
    MaxValue: 24
  RequireLowercaseChars:
    Type: 'String'
    Description: 'Require at least one lowercase character'
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
  RequireNumbers:
    Type: 'String'
    Description: 'Require at least one number'
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'
  RequireSymbols:
    Type: 'String'
    Description: 'Require at least one symbol'
    Default: 'False'
    AllowedValues:
      - 'True'
      - 'False'
  RequireUppercaseChars:
    Type: 'String'
    Description: 'Require at least one uppercase character'
    Default: 'True'
    AllowedValues:
      - 'True'
      - 'False'

Resources:
  StudentsGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: Students
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess
        - arn:aws:iam::aws:policy/AWSLambdaFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoPowerUser
        - arn:aws:iam::aws:policy/EC2InstanceConnect
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
        - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action: sts:AssumeRole
              Resource: arn:aws:iam::026709880083:role/CAACourseDNSUpdateRole
          PolicyName: AssumeRoleForDNSRecords
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              Effect: Allow
              Action:
                - iam:CreateRole
                - iam:AttachRolePolicy
                - iam:PutRolePolicy
                - iam:DeleteRole
                - iam:PassRole
                - iam:CreateInstanceProfile
                - iam:RemoveRoleFromInstanceProfile
                - iam:DeleteInstanceProfile
                - iam:AddRoleToInstanceProfile
                - iam:DetachRolePolicy
                - iam:DeleteRole
                - iam:DeleteRolePolicy
                - iam:CreatePolicy
              Resource: '*'
          PolicyName: AllowRoleCreation
  GeneralGroup:
    Type: AWS::IAM::Group
    Properties:
      GroupName: General
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/ReadOnlyAccess
        - arn:aws:iam::aws:policy/IAMUserChangePassword
        - arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess
        - arn:aws:iam::aws:policy/CloudFrontFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerServiceFullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonSQSFullAccess
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite

  StudentUser:
    Type: AWS::IAM::User
    DependsOn:
      - StudentsGroup
      - GeneralGroup
    Properties:
      Groups:
        - Students
        - General
      LoginProfile:
        Password: Init1234
        PasswordResetRequired: true
      UserName: student

  CWCrossAccountSharingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CloudWatch-CrossAccountSharingRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: arn:aws:iam::026709880083:root
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchAutomaticDashboardsAccess

  IAMPasswordPolicy:
    Type: 'Custom::IAMPolicyResource'
    Properties:
      ServiceToken: !GetAtt IAMPasswordPolicyResource.Arn
      Region: !Ref 'AWS::Region'

  IAMPasswordPolicyResource:
    Type: 'AWS::Lambda::Function'
    DependsOn:
      - IAMPasswordPolicyResourceExecutionRole
    Properties:
      Runtime: python2.7
      Handler: index.lambda_handler
      MemorySize: 128
      Timeout: 30
      Role: !GetAtt IAMPasswordPolicyResourceExecutionRole.Arn
      Code:
        ZipFile: !Sub |
          import boto3
          from botocore.exceptions import ClientError
          import json
          import cfnresponse
          iam = boto3.client("iam")
          # Lambda entry point
          def lambda_handler(event, context):
            if event['RequestType'] == 'Create' or event['RequestType'] == 'Update':
              res, reason = update_policy()
            elif event['RequestType'] == 'Delete':
              res, reason = delete_policy()
            else:
              res = False
              reason = "Unknown operation: " + event['RequestType']
            responseData = {}
            responseData['Reason'] = reason
            if res:
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
            else:
              cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
          def update_policy():
            try:
              response = iam.update_account_password_policy(
                  AllowUsersToChangePassword=True,
                  HardExpiry=False,
                  MaxPasswordAge=${MaxPasswordAge},
                  MinimumPasswordLength=${MinPasswordLength},
                  RequireLowercaseCharacters=${RequireLowercaseChars},
                  RequireNumbers=${RequireNumbers},
                  RequireSymbols=${RequireSymbols},
                  RequireUppercaseCharacters=${RequireUppercaseChars},
                  PasswordReusePrevention=${PasswordHistory})
              return(True, response)
            except Exception as e:
              return (False, "Cannot update policy: " + str(e))
          def delete_policy():
            try:
              policy = iam.get_account_password_policy()
              response = iam.delete_account_password_policy()
              return (True, response)
            except Exception as e:
              return (False, "Cannot delete policy: " + str(e))
  IAMPasswordPolicyResourceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: IAMPasswordCreatorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
              - Effect: Allow
                Action:
                  - iam:GetAccountPasswordPolicy
                  - iam:UpdateAccountPasswordPolicy
                  - iam:DeleteAccountPasswordPolicy
                Resource: '*'

  StudentIAMAdminRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: IAM-Admin-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt StudentUser.Arn
            Action:
              - sts:AssumeRole
      Path: '/'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/IAMFullAccess
